<?php

namespace DoctrineORMModule\Proxy\__CG__\Pc_help\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Problema extends \Pc_help\Entity\Problema implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'cod_os', 'maquina', 'solucao', 'status', 'problem', 'obs');
        }

        return array('__isInitialized__', 'cod_os', 'maquina', 'solucao', 'status', 'problem', 'obs');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Problema $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getCodOs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCodOs', array());

        return parent::getCodOs();
    }

    /**
     * {@inheritDoc}
     */
    public function setCodOs($cod_os)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCodOs', array($cod_os));

        return parent::setCodOs($cod_os);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaquina()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaquina', array());

        return parent::getMaquina();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaquina($maquina)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaquina', array($maquina));

        return parent::setMaquina($maquina);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblem', array());

        return parent::getProblem();
    }

    /**
     * {@inheritDoc}
     */
    public function setProblem($problem)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProblem', array($problem));

        return parent::setProblem($problem);
    }

    /**
     * {@inheritDoc}
     */
    public function getObs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObs', array());

        return parent::getObs();
    }

    /**
     * {@inheritDoc}
     */
    public function setObs($obs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObs', array($obs));

        return parent::setObs($obs);
    }

    /**
     * {@inheritDoc}
     */
    public function getSolucao()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSolucao', array());

        return parent::getSolucao();
    }

    /**
     * {@inheritDoc}
     */
    public function setSolucao($solucao)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSolucao', array($solucao));

        return parent::setSolucao($solucao);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

}
